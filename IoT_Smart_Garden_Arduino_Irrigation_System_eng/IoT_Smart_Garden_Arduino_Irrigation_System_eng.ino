/* 
  Sketch generated by Arduino IoT Cloud for the project:
  "IoT_Smart_Garden_Arduino_Irrigation_System_3CI_AS_2425"

  Auto-generated Cloud variables:
  - int pl1, pl2, pl3, pl4: store soil moisture values for 4 plants
  - bool bypass: a virtual switch to trigger manual irrigation from the IoT dashboard

  READ/WRITE variables also trigger associated functions automatically when changed via the cloud.
*/

/* Authors: Prof. Antonio Caiafa - Amedeo De Giglio
   Class: 3C Computer Science
*/

#include "thingProperties.h"          // Includes Arduino Cloud settings and variable bindings
#include "ArduinoGraphics.h"          // Library for text and animations on LED display
#include "Arduino_LED_Matrix.h"       // Library to control built-in LED matrix on Arduino Uno R4

#define thesholdmin 277               // Minimum soil humidity threshold (unused)
#define thesholdmax 650               // Maximum threshold: values above this mean the soil is dry

// Define analog pins connected to the soil moisture sensors for each plant
#define plant1 A0
#define plant2 A1
#define plant3 A2
#define plant4 A3

// Define digital pins connected to relays/water pumps for each plant
#define p1 7
#define p2 6
#define p3 5
#define p4 4

// Define the digital pin for the manual override push button
#define SW 2

ArduinoLEDMatrix matrix;              // Create matrix object to manage LED display

void setup() {
  Serial.begin(9600);                 // Start serial communication at 9600 baud
  delay(1500);                        // Wait for the serial monitor to be ready

  initProperties();                   // Initialize IoT Cloud variables and functions

  ArduinoCloud.begin(ArduinoIoTPreferredConnection, false); // Start IoT Cloud connection
  delay(3000);                        // Allow time to establish connection

  matrix.begin();                     // Initialize the LED matrix

  // Set pump pins as outputs
  pinMode(p1, OUTPUT);
  pinMode(p2, OUTPUT);
  pinMode(p3, OUTPUT);
  pinMode(p4, OUTPUT);

  // Ensure all pumps are off at startup (HIGH disables relay in active-low configuration)
  digitalWrite(p1, HIGH);
  digitalWrite(p2, HIGH);
  digitalWrite(p3, HIGH);
  digitalWrite(p4, HIGH);

  pinMode(SW, INPUT);                 // Set button pin as input

  setDebugMessageLevel(4);           // Set debug output level
  ArduinoCloud.printDebugInfo();     // Print cloud debug info to serial monitor
}

void loop() {
  int flag = 0;                       // Used to track and change the display message

  ArduinoCloud.update();             // Keep the cloud connection alive and synced

  // Load and play a startup animation on the LED matrix
  matrix.loadSequence(LEDMATRIX_ANIMATION_STARTUP);  
  matrix.play(true);                 
  delay(2500);                        // Wait for animation to finish

  Manual_Bypass();                   // Check if the manual button was pressed
  flag = 1;                           // Set flag to determine which message to display

  ArduinoCloud.update();             // Update cloud connection
  Print_Led_panel(flag);             // Show first message on LED matrix

  Manual_Bypass();                   // Re-check for manual override

  // === Plant 1: Read moisture and water if needed ===
  pl1 = analogRead(plant1);                              // Read moisture sensor value
  Serial.println("Humidity Plant 1: " + String(pl1));    // Output value to serial monitor
  if (pl1 > thesholdmax) {                               // If soil is dry
    digitalWrite(p1, LOW);                               // Activate pump (relay LOW)
    while (analogRead(plant1) > thesholdmax) {           // Keep watering until threshold is reached
      delay(2000);                                        // Wait 2 seconds before next check
    }
    digitalWrite(p1, HIGH);                              // Deactivate pump
  }

  Manual_Bypass();                   // Manual mode check
  flag++;                            // Move to next message
  ArduinoCloud.update();             // Cloud sync
  Print_Led_panel(flag);             // Display second message

  Manual_Bypass();                   // Manual check

  // === Plant 2 ===
  pl2 = analogRead(plant2);
  Serial.println("Humidity Plant 2: " + String(pl2));
  if (pl2 > thesholdmax) {
    digitalWrite(p2, LOW);
    while (analogRead(plant2) > thesholdmax) {
      delay(2000);
    }
    digitalWrite(p2, HIGH);
  }

  Manual_Bypass();
  flag++;
  ArduinoCloud.update();
  Print_Led_panel(flag);

  Manual_Bypass();

  // === Plant 3 ===
  pl3 = analogRead(plant3);
  Serial.println("Humidity Plant 3: " + String(pl3));
  if (pl3 > thesholdmax) {
    digitalWrite(p3, LOW);
    while (analogRead(plant3) > thesholdmax) {
      delay(2000);
    }
    digitalWrite(p3, HIGH);
  }

  Manual_Bypass();
  flag++;
  ArduinoCloud.update();
  Print_Led_panel(flag);

  Manual_Bypass();

  // === Plant 4 ===
  pl4 = analogRead(plant4);
  Serial.println("Humidity Plant 4: " + String(pl4));
  if (pl4 > thesholdmax) {
    digitalWrite(p4, LOW);
    while (analogRead(plant4) > thesholdmax) {
      delay(2000);
    }
    digitalWrite(p4, HIGH);
  }

  Manual_Bypass();
  flag++;
  ArduinoCloud.update();
  Print_Led_panel(flag);

  Manual_Bypass();  // Final manual override check
}

// This function is automatically triggered when the "bypass" cloud variable changes
void onBypassChange() {
  Serial.println("Virtual switch activated");
  Serial.println(bypass);              // Print new value

  // Turn on all pumps
  digitalWrite(p1, LOW);
  digitalWrite(p2, LOW);
  digitalWrite(p3, LOW);
  digitalWrite(p4, LOW);
  delay(3000);                         // Water for 3 seconds

  Serial.println("Virtual switch deactivated");
  Serial.println(bypass);              // Print status

  // Turn off all pumps
  digitalWrite(p1, HIGH);
  digitalWrite(p2, HIGH);
  digitalWrite(p3, HIGH);
  digitalWrite(p4, HIGH);
}

// Manual override via physical push button
void Manual_Bypass(){
  if (digitalRead(SW) == 1) {          // If button is pressed
    Serial.println("Physical switch activated");

    // Turn on all pumps
    digitalWrite(p1, LOW);
    digitalWrite(p2, LOW);
    digitalWrite(p3, LOW);
    digitalWrite(p4, LOW);

    // Wait until the button is released
    while (digitalRead(SW) == 1) {
      delay(2000);                     // Avoid rapid polling
    }

    // Turn off all pumps
    digitalWrite(p1, HIGH);
    digitalWrite(p2, HIGH);
    digitalWrite(p3, HIGH);
    digitalWrite(p4, HIGH);
  }
}

// Display messages on the LED matrix based on current stage
void Print_Led_panel(int flag){
  matrix.play(true);                        // Start animation playback
  matrix.beginDraw();                       // Begin drawing frame
  matrix.textScrollSpeed(75);             // Set scroll speed
  matrix.textFont(Font_5x7);               // Use 5x7 pixel font
  matrix.beginText(0, 1, 0xFFFFFF);        // Start text at (0,1) in white

  // Display different messages depending on flag value
  if(flag == 1){
    matrix.println(" IISS 'Augusto Righi' ");
  }
  else if(flag == 2){
    matrix.println(" Taranto Proff. Antonio Caiafa ");
  }
  else if(flag == 3){
    matrix.println("- Amedeo De Giglio ");
  }
  else if(flag == 4){
    matrix.println(" Hidro Project AS 24/25 ");
  }
  else if(flag == 5){
    matrix.println(" 3C Computer Science");
  }

  matrix.endText(SCROLL_LEFT);             // Scroll message leftwards
  matrix.endDraw();                        // Finish drawing frame
}